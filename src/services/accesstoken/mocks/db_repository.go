// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/danielg/Documents/goworkspace/src/github.com/danielgom/bookstore_oauthapi/src/repository/db/db_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	accesstoken "github.com/danielgom/bookstore_oauthapi/src/domain/accesstoken"
	errors "github.com/danielgom/bookstore_utils-go/errors"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
)

// MockCQLSession is a mock of CQLSession interface.
type MockCQLSession struct {
	ctrl     *gomock.Controller
	recorder *MockCQLSessionMockRecorder
}

// MockCQLSessionMockRecorder is the mock recorder for MockCQLSession.
type MockCQLSessionMockRecorder struct {
	mock *MockCQLSession
}

// NewMockCQLSession creates a new mock instance.
func NewMockCQLSession(ctrl *gomock.Controller) *MockCQLSession {
	mock := &MockCQLSession{ctrl: ctrl}
	mock.recorder = &MockCQLSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCQLSession) EXPECT() *MockCQLSessionMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockCQLSession) Query(arg0 string, arg1 ...interface{}) *gocql.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*gocql.Query)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockCQLSessionMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCQLSession)(nil).Query), varargs...)
}

// MockDRepository is a mock of DRepository interface.
type MockDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDRepositoryMockRecorder
}

// MockDRepositoryMockRecorder is the mock recorder for MockDRepository.
type MockDRepositoryMockRecorder struct {
	mock *MockDRepository
}

// NewMockDRepository creates a new mock instance.
func NewMockDRepository(ctrl *gomock.Controller) *MockDRepository {
	mock := &MockDRepository{ctrl: ctrl}
	mock.recorder = &MockDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDRepository) EXPECT() *MockDRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDRepository) Create(arg0 *accesstoken.AccessToken) errors.RestErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(errors.RestErr)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDRepository)(nil).Create), arg0)
}

// GetByID mocks base method.
func (m *MockDRepository) GetByID(arg0 string) (*accesstoken.AccessToken, errors.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*accesstoken.AccessToken)
	ret1, _ := ret[1].(errors.RestErr)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDRepository)(nil).GetByID), arg0)
}

// UpdateExpirationTime mocks base method.
func (m *MockDRepository) UpdateExpirationTime(arg0 *accesstoken.AccessToken) errors.RestErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpirationTime", arg0)
	ret0, _ := ret[0].(errors.RestErr)
	return ret0
}

// UpdateExpirationTime indicates an expected call of UpdateExpirationTime.
func (mr *MockDRepositoryMockRecorder) UpdateExpirationTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpirationTime", reflect.TypeOf((*MockDRepository)(nil).UpdateExpirationTime), arg0)
}
